generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  role         Role     @default(AGENT)
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  createdTemplates InvoiceTemplate[]

  @@map("users")
}

model Client {
  id             String  @id @default(cuid())
  name           String
  contactName    String? @map("contact_name")
  contactEmail   String? @map("contact_email")
  billingAddress String? @map("billing_address")
  status         ClientStatus @default(ACTIVE)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contracts Contract[]
  invoices  Invoice[]

  @@map("clients")
}

model Contract {
  id               String   @id @default(cuid())
  clientId         String   @map("client_id")
  planName         String   @map("plan_name")
  flatMonthlyFee   Decimal  @map("flat_monthly_fee") @db.Decimal(10, 2)
  dataRateType     DataRateType @map("data_rate_type")
  dataRatePrice    Decimal  @map("data_rate_price") @db.Decimal(10, 4)
  nextInvoiceDate  DateTime @map("next_invoice_date")
  isActive         Boolean  @default(true) @map("is_active")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  usageRecords  UsageRecord[]
  invoices      Invoice[]

  @@map("contracts")
}

model UsageRecord {
  id            String   @id @default(cuid())
  contractId    String   @map("contract_id")
  periodStart   DateTime @map("period_start")
  periodEnd     DateTime @map("period_end")
  usageQuantity Decimal  @map("usage_quantity") @db.Decimal(15, 4)
  unit          String
  notes         String?
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

model InvoiceTemplate {
  id              String @id @default(cuid())
  name            String
  storageKey      String @map("storage_key")
  variablesSchema Json   @map("variables_schema")
  createdById     String @map("created_by_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdBy User @relation(fields: [createdById], references: [id])

  @@map("invoice_templates")
}

model Invoice {
  id            String      @id @default(cuid())
  clientId      String      @map("client_id")
  contractId    String      @map("contract_id")
  invoiceNumber String      @unique @map("invoice_number")
  periodStart   DateTime    @map("period_start")
  periodEnd     DateTime    @map("period_end")
  issueDate     DateTime    @map("issue_date")
  dueDate       DateTime    @map("due_date")
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  pdfStorageKey String?     @map("pdf_storage_key")
  status        InvoiceStatus @default(DRAFT)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  client    Client            @relation(fields: [clientId], references: [id])
  contract  Contract          @relation(fields: [contractId], references: [id])
  lineItems InvoiceLineItem[]

  @@map("invoices")
}

model InvoiceLineItem {
  id          String  @id @default(cuid())
  invoiceId   String  @map("invoice_id")
  description String
  quantity    Decimal @db.Decimal(10, 4)
  unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
  amount      Decimal @db.Decimal(10, 2)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

enum Role {
  ADMIN
  AGENT
  READ_ONLY
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum DataRateType {
  PER_TOKEN
  PER_MINUTE
  PER_REQUEST
  PER_USAGE_UNIT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  VOID
  OVERDUE
}